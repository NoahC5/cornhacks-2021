"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.PageLoader = exports.usePageLoadingContext = exports.PageLoadingContext = void 0;

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/set-timeout"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _internal = require("./internal");

const PageLoadingContext = (0, _internal.createNamedContext)('PageLoading');
exports.PageLoadingContext = PageLoadingContext;

const usePageLoadingContext = () => (0, _react.useContext)(PageLoadingContext);

exports.usePageLoadingContext = usePageLoadingContext;

class PageLoader extends _react.default.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      Page: undefined,
      pageName: undefined,
      slowModuleImport: false
    };

    this.propsChanged = (p1, p2) => {
      if (p1.spec.name !== p2.spec.name) {
        return true;
      }

      return !(0, _lodash.default)(p1.params, p2.params);
    };

    this.stateChanged = (s1, s2) => {
      if (s1.pageName !== s2.pageName) {
        return true;
      }

      return !(0, _lodash.default)(s1.params, s2.params);
    };

    this.clearLoadingTimeout = () => {
      clearTimeout(this.loadingTimeout);
    };

    this.startPageLoadTransition = async props => {
      const {
        spec,
        delay
      } = props;
      const {
        loader,
        name
      } = spec; // Update the context if importing the page is taking longer
      // than `delay`.
      // Consumers of the context can show a loading indicator
      // to signal to the user that something is happening.

      this.loadingTimeout = (0, _setTimeout2.default)(() => this.setState({
        slowModuleImport: true
      }), delay); // Wait to download and parse the page.

      const module = await loader(); // Remove the timeout because the page has loaded.

      this.clearLoadingTimeout();
      this.setState({
        pageName: name,
        Page: module.default,
        slowModuleImport: false,
        params: props.params
      });
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (this.propsChanged(this.props, nextProps)) {
      this.clearLoadingTimeout();
      this.startPageLoadTransition(nextProps);
      return false;
    }

    if (this.stateChanged(this.state, nextState)) {
      return true;
    }

    return true;
  }

  componentDidMount() {
    this.startPageLoadTransition(this.props);
  }

  componentDidUpdate(prevProps) {
    if (this.propsChanged(prevProps, this.props)) {
      this.clearLoadingTimeout();
      this.startPageLoadTransition(this.props);
    }
  }

  render() {
    const {
      Page
    } = this.state;

    if (Page) {
      return /*#__PURE__*/_react.default.createElement(_internal.ParamsContext.Provider, {
        value: this.state.params
      }, /*#__PURE__*/_react.default.createElement(PageLoadingContext.Provider, {
        value: {
          loading: this.state.slowModuleImport
        }
      }, /*#__PURE__*/_react.default.createElement(Page, this.state.params)));
    } else {
      return null;
    }
  }

}

exports.PageLoader = PageLoader;