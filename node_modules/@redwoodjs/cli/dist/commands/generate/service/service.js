"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.description = exports.command = exports.builder = exports.defaults = exports.files = exports.buildScenario = exports.fieldsToScenario = exports.scenarioFieldValue = exports.parseSchema = void 0;

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/reduce"));

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/entries"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/parse-int"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/concat"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _camelcase = _interopRequireDefault(require("camelcase"));

var _pascalcase = _interopRequireDefault(require("pascalcase"));

var _pluralize = _interopRequireDefault(require("pluralize"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _lib = require("../../../lib");

var _generate = require("../../generate");

var _helpers = require("../helpers");

const DEFAULT_SCENARIO_NAMES = ['one', 'two']; // parses the schema into scalar fields, relations and an array of foreign keys

const parseSchema = async model => {
  var _context;

  const schema = await (0, _lib.getSchema)(model);
  const relations = {};
  let foreignKeys = []; // aggregate the plain String, Int and DateTime fields

  let scalarFields = (0, _filter.default)(_context = schema.fields).call(_context, field => {
    if (field.relationFromFields) {
      // only build relations for those that are required
      if (field.isRequired) {
        relations[field.name] = field.relationFromFields;
      }

      foreignKeys = (0, _concat.default)(foreignKeys).call(foreignKeys, field.relationFromFields);
    }

    return field.isRequired && !field.hasDefaultValue && // don't include fields that the database will default
    !field.relationName // this field isn't a relation (ie. comment.post)
    ;
  }); // remove scalars that are foriegn keys

  scalarFields = (0, _filter.default)(scalarFields).call(scalarFields, field => {
    return !(0, _includes.default)(foreignKeys).call(foreignKeys, field.name);
  });
  return {
    scalarFields,
    relations
  };
};

exports.parseSchema = parseSchema;

const scenarioFieldValue = field => {
  const rand = (0, _parseInt2.default)(Math.random() * 10000000);

  switch (field.type) {
    case 'String':
      return field.isUnique ? `String${rand}` : 'String';

    case 'Int':
      return rand;

    case 'DateTime':
      return new Date().toISOString().replace(/\.\d{3}/, '');
  }
};

exports.scenarioFieldValue = scenarioFieldValue;

const fieldsToScenario = async (scalarFields, relations) => {
  const data = {}; // scalars

  (0, _forEach.default)(scalarFields).call(scalarFields, field => {
    data[field.name] = scenarioFieldValue(field);
  }); // relations

  for (const [relation, _foreignKeys] of (0, _entries.default)(relations)) {
    const relationModelName = (0, _pascalcase.default)(_pluralize.default.singular(relation));
    const {
      scalarFields: relScalarFields,
      relations: relRelations
    } = await parseSchema(relationModelName);
    data[relation] = {
      create: await fieldsToScenario(relScalarFields, relRelations)
    };
  }

  return data;
}; // creates the scenario data based on the data definitions in schema.prisma


exports.fieldsToScenario = fieldsToScenario;

const buildScenario = async model => {
  const scenarioModelName = (0, _camelcase.default)(model);
  const standardScenario = {
    [scenarioModelName]: {}
  };
  const {
    scalarFields,
    relations
  } = await parseSchema(model); // turn scalar fields into actual scenario data

  for (const name of DEFAULT_SCENARIO_NAMES) {
    standardScenario[scenarioModelName][name] = await fieldsToScenario(scalarFields, relations);
  }

  return standardScenario;
};

exports.buildScenario = buildScenario;

const files = async ({
  name,
  tests = true,
  relations,
  javascript,
  typescript,
  ...rest
}) => {
  const componentName = (0, _camelcase.default)((0, _pluralize.default)(name));
  const model = (0, _pascalcase.default)(_pluralize.default.singular(name));
  const extension = 'ts';
  const serviceFile = (0, _helpers.templateForComponentFile)({
    name,
    componentName: componentName,
    extension: `.${extension}`,
    apiPathSection: 'services',
    generator: 'service',
    templatePath: `service.${extension}.template`,
    templateVars: {
      relations: relations || [],
      ...rest
    }
  });
  const testFile = (0, _helpers.templateForComponentFile)({
    name,
    componentName: componentName,
    extension: `.test.${extension}`,
    apiPathSection: 'services',
    generator: 'service',
    templatePath: `test.${extension}.template`,
    templateVars: {
      relations: relations || [],
      ...rest
    }
  });
  const scenariosFile = (0, _helpers.templateForComponentFile)({
    name,
    componentName: componentName,
    extension: `.scenarios.${extension}`,
    apiPathSection: 'services',
    generator: 'service',
    templatePath: `scenarios.${extension}.template`,
    templateVars: {
      scenario: await buildScenario(model),
      ...rest
    }
  });
  const files = [serviceFile];

  if (tests) {
    files.push(testFile);
    files.push(scenariosFile);
  } // Returns
  // {
  //    "path/to/fileA": "<<<template>>>",
  //    "path/to/fileB": "<<<template>>>",
  // }


  return (0, _reduce.default)(files).call(files, (acc, [outputPath, content]) => {
    if (javascript && !typescript) {
      content = (0, _lib.transformTSToJS)(outputPath, content);
      outputPath = outputPath.replace('.ts', '.js');
    }

    return {
      [outputPath]: content,
      ...acc
    };
  }, {});
};

exports.files = files;
const defaults = { ..._generate.yargsDefaults,
  tests: {
    default: true,
    description: 'Generate test files',
    type: 'boolean'
  },
  crud: {
    default: false,
    description: 'Create CRUD functions',
    type: 'boolean'
  }
};
exports.defaults = defaults;

const builder = yargs => {
  var _context2;

  yargs.positional('name', {
    description: 'Name of the service',
    type: 'string'
  }).epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/reference/command-line-interface#generate-service')}`);
  (0, _forEach.default)(_context2 = (0, _entries.default)(defaults)).call(_context2, ([option, config]) => {
    yargs.option(option, config);
  });
};

exports.builder = builder;
const {
  command,
  description,
  handler
} = (0, _helpers.createYargsForComponentGeneration)({
  componentName: 'service',
  filesFn: files
});
exports.handler = handler;
exports.description = description;
exports.command = command;