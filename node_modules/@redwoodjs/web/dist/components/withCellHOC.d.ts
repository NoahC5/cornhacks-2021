/// <reference types="react" />
import type { DocumentNode } from 'graphql';
import { OperationResult } from "./GraphQLHooksProvider";
export declare type DataObject = {
    [key: string]: unknown;
};
export declare type CellFailureStateComponent = Omit<OperationResult, 'data' | 'loading'>;
export declare type CellLoadingEmptyStateComponent = Omit<OperationResult, 'error' | 'loading' | 'data'>;
export declare type CellSuccessStateComponent = Omit<OperationResult, 'error' | 'loading' | 'data'> | DataObject;
export interface WithCellProps {
    beforeQuery?: <TProps>(props: TProps) => {
        variables: TProps;
    };
    QUERY: DocumentNode | (({ variables: unknown }: {
        variables: any;
    }) => DocumentNode);
    afterQuery?: (data: DataObject) => DataObject;
    Loading?: React.FC<CellLoadingEmptyStateComponent>;
    Failure?: React.FC<CellFailureStateComponent>;
    Empty?: React.FC<CellLoadingEmptyStateComponent>;
    Success: React.FC<CellSuccessStateComponent>;
}
/**
 * Is a higher-order-component that executes a GraphQL query and automatically
 * manages the lifecycle of that query. If you export named parameters that match
 * the required params of `withCell` it will be automatically wrapped in this
 * HOC via a babel-plugin.
 *
 * @param {string} QUERY - The graphQL syntax tree to execute
 * @param {function=} beforeQuery - Prepare the variables and options for the query
 * @param {function=} afterQuery - Sanitize the data return from graphQL
 * @param {Component=} Loading - Loading, render this component
 * @param {Component=} Empty - Loading, render this component
 * @param {Component=} Failure - Something went wrong, render this component
 * @param {Component} Success - Data has loaded, render this component
 *
 * @example
 * ```js
 * // IMPLEMENTATION:
 * // `src/ExampleComponent/index.js`. This file is automatically dealt with
 * in webpack.
 *
 * import { withCell } from '@redwoodjs/web'
 * import * as cell from './ExampleComponent'
 *
 * export default withCell(cell)
 * ```
 *
 * // USAGE:
 * // Now you have a cell component that will handle the lifecycle methods of
 * // a query
 * import ExampleComponent from 'src/ExampleComponent'
 *
 * const ThingThatUsesExampleComponent = () => {
 *  return <div><ExampleComponent /></div>
 * }
 */
export declare const withCell: ({ beforeQuery, QUERY, afterQuery, Loading, Failure, Empty, Success, }: WithCellProps) => (props: Record<string, unknown>) => JSX.Element;
//# sourceMappingURL=withCellHOC.d.ts.map