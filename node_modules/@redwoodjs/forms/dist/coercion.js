"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.useCoercion = exports.CoercionContextProvider = void 0;

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/parse-int"));

var _parseFloat2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/parse-float"));

var _react = _interopRequireDefault(require("react"));

const CoercionContext = /*#__PURE__*/_react.default.createContext({});

const CoercionContextProvider = ({
  children
}) => {
  const [coercions, setCoercions] = _react.default.useState({});

  return /*#__PURE__*/_react.default.createElement(CoercionContext.Provider, {
    value: {
      coercions,
      setCoercions
    }
  }, children);
};

exports.CoercionContextProvider = CoercionContextProvider;
const COERCION_FUNCTIONS = {
  Boolean: value => !!value,
  Float: value => (0, _parseFloat2.default)(value),
  Int: value => (0, _parseInt2.default)(value, 10),
  Json: value => JSON.parse(value)
};
const inputTypeToDataTypeMapping = {
  checkbox: 'Boolean',
  number: 'Int'
};

const useCoercion = () => {
  const coercionContext = _react.default.useContext(CoercionContext);

  const coerce = _react.default.useCallback((name, value) => coercionContext.coercions[name] ? coercionContext.coercions[name](value) : value, [coercionContext.coercions]);

  const setCoercion = _react.default.useCallback(({
    name,
    type,
    transformValue
  }) => {
    let coercionFunction;

    if (typeof transformValue === 'function') {
      coercionFunction = transformValue;
    } else {
      if (transformValue) {
        coercionFunction = COERCION_FUNCTIONS[transformValue];
      } else if (type && inputTypeToDataTypeMapping[type]) {
        coercionFunction = COERCION_FUNCTIONS[inputTypeToDataTypeMapping[type]];
      } else {
        coercionFunction = value => value;
      }
    }

    coercionContext.setCoercions.call(null, coercions => ({ ...coercions,
      [name]: coercionFunction
    }));
  }, [coercionContext.setCoercions]);

  return {
    coerce,
    setCoercion
  };
};

exports.useCoercion = useCoercion;