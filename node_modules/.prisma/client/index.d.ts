
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.12.1
 * Query Engine version: cf0680a1bfe8d5e743dc659cc7f08009f9587d58
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;





/**
 * Model UserExample
 */

export type UserExample = {
  id: number
  email: string
  name: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more UserExamples
 * const userExamples = await prisma.userExample.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more UserExamples
   * const userExamples = await prisma.userExample.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.userExample`: Exposes CRUD operations for the **UserExample** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserExamples
    * const userExamples = await prisma.userExample.findMany()
    * ```
    */
  get userExample(): Prisma.UserExampleDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.12.1
   * Query Engine version: cf0680a1bfe8d5e743dc659cc7f08009f9587d58
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    UserExample: 'UserExample'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    DS?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: string
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model UserExample
   */


  export type AggregateUserExample = {
    count: number
    avg: UserExampleAvgAggregateOutputType | null
    sum: UserExampleSumAggregateOutputType | null
    min: UserExampleMinAggregateOutputType | null
    max: UserExampleMaxAggregateOutputType | null
  }

  export type UserExampleAvgAggregateOutputType = {
    id: number
  }

  export type UserExampleSumAggregateOutputType = {
    id: number
  }

  export type UserExampleMinAggregateOutputType = {
    id: number
  }

  export type UserExampleMaxAggregateOutputType = {
    id: number
  }


  export type UserExampleAvgAggregateInputType = {
    id?: true
  }

  export type UserExampleSumAggregateInputType = {
    id?: true
  }

  export type UserExampleMinAggregateInputType = {
    id?: true
  }

  export type UserExampleMaxAggregateInputType = {
    id?: true
  }

  export type AggregateUserExampleArgs = {
    where?: UserExampleWhereInput
    orderBy?: XOR<Enumerable<UserExampleOrderByInput>, UserExampleOrderByInput>
    cursor?: UserExampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserExampleDistinctFieldEnum>
    count?: true
    avg?: UserExampleAvgAggregateInputType
    sum?: UserExampleSumAggregateInputType
    min?: UserExampleMinAggregateInputType
    max?: UserExampleMaxAggregateInputType
  }

  export type GetUserExampleAggregateType<T extends AggregateUserExampleArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUserExampleAggregateScalarType<T[P]>
  }

  export type GetUserExampleAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UserExampleAvgAggregateOutputType ? UserExampleAvgAggregateOutputType[P] : never
  }
    
    

  export type UserExampleSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
  }

  export type UserExampleGetPayload<
    S extends boolean | null | undefined | UserExampleArgs,
    U = keyof S
      > = S extends true
        ? UserExample
    : S extends undefined
    ? never
    : S extends UserExampleArgs | FindManyUserExampleArgs
    ?'include' extends U
    ? UserExample 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserExample ?UserExample [P]
  : 
     never
  } 
    : UserExample
  : UserExample


  export interface UserExampleDelegate {
    /**
     * Find zero or one UserExample that matches the filter.
     * @param {FindUniqueUserExampleArgs} args - Arguments to find a UserExample
     * @example
     * // Get one UserExample
     * const userExample = await prisma.userExample.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueUserExampleArgs>(
      args: Subset<T, FindUniqueUserExampleArgs>
    ): CheckSelect<T, Prisma__UserExampleClient<UserExample | null>, Prisma__UserExampleClient<UserExampleGetPayload<T> | null>>
    /**
     * Find the first UserExample that matches the filter.
     * @param {FindFirstUserExampleArgs} args - Arguments to find a UserExample
     * @example
     * // Get one UserExample
     * const userExample = await prisma.userExample.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstUserExampleArgs>(
      args?: Subset<T, FindFirstUserExampleArgs>
    ): CheckSelect<T, Prisma__UserExampleClient<UserExample | null>, Prisma__UserExampleClient<UserExampleGetPayload<T> | null>>
    /**
     * Find zero or more UserExamples that matches the filter.
     * @param {FindManyUserExampleArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserExamples
     * const userExamples = await prisma.userExample.findMany()
     * 
     * // Get first 10 UserExamples
     * const userExamples = await prisma.userExample.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userExampleWithIdOnly = await prisma.userExample.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyUserExampleArgs>(
      args?: Subset<T, FindManyUserExampleArgs>
    ): CheckSelect<T, Promise<Array<UserExample>>, Promise<Array<UserExampleGetPayload<T>>>>
    /**
     * Create a UserExample.
     * @param {UserExampleCreateArgs} args - Arguments to create a UserExample.
     * @example
     * // Create one UserExample
     * const UserExample = await prisma.userExample.create({
     *   data: {
     *     // ... data to create a UserExample
     *   }
     * })
     * 
    **/
    create<T extends UserExampleCreateArgs>(
      args: Subset<T, UserExampleCreateArgs>
    ): CheckSelect<T, Prisma__UserExampleClient<UserExample>, Prisma__UserExampleClient<UserExampleGetPayload<T>>>
    /**
     * Delete a UserExample.
     * @param {UserExampleDeleteArgs} args - Arguments to delete one UserExample.
     * @example
     * // Delete one UserExample
     * const UserExample = await prisma.userExample.delete({
     *   where: {
     *     // ... filter to delete one UserExample
     *   }
     * })
     * 
    **/
    delete<T extends UserExampleDeleteArgs>(
      args: Subset<T, UserExampleDeleteArgs>
    ): CheckSelect<T, Prisma__UserExampleClient<UserExample>, Prisma__UserExampleClient<UserExampleGetPayload<T>>>
    /**
     * Update one UserExample.
     * @param {UserExampleUpdateArgs} args - Arguments to update one UserExample.
     * @example
     * // Update one UserExample
     * const userExample = await prisma.userExample.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserExampleUpdateArgs>(
      args: Subset<T, UserExampleUpdateArgs>
    ): CheckSelect<T, Prisma__UserExampleClient<UserExample>, Prisma__UserExampleClient<UserExampleGetPayload<T>>>
    /**
     * Delete zero or more UserExamples.
     * @param {UserExampleDeleteManyArgs} args - Arguments to filter UserExamples to delete.
     * @example
     * // Delete a few UserExamples
     * const { count } = await prisma.userExample.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserExampleDeleteManyArgs>(
      args: Subset<T, UserExampleDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more UserExamples.
     * @param {UserExampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserExamples
     * const userExample = await prisma.userExample.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserExampleUpdateManyArgs>(
      args: Subset<T, UserExampleUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one UserExample.
     * @param {UserExampleUpsertArgs} args - Arguments to update or create a UserExample.
     * @example
     * // Update or create a UserExample
     * const userExample = await prisma.userExample.upsert({
     *   create: {
     *     // ... data to create a UserExample
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserExample we want to update
     *   }
     * })
    **/
    upsert<T extends UserExampleUpsertArgs>(
      args: Subset<T, UserExampleUpsertArgs>
    ): CheckSelect<T, Prisma__UserExampleClient<UserExample>, Prisma__UserExampleClient<UserExampleGetPayload<T>>>
    /**
     * Find zero or one UserExample that matches the filter.
     * @param {FindUniqueUserExampleArgs} args - Arguments to find a UserExample
     * @deprecated This will be deprecated please use prisma.userExample.findUnique
     * @example
     * // Get one UserExample
     * const userExample = await prisma.userExample.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueUserExampleArgs>(
      args: Subset<T, FindUniqueUserExampleArgs>
    ): CheckSelect<T, Prisma__UserExampleClient<UserExample | null>, Prisma__UserExampleClient<UserExampleGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyUserExampleArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateUserExampleArgs>(args: Subset<T, AggregateUserExampleArgs>): Promise<GetUserExampleAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserExample.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserExampleClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserExample findUnique
   */
  export type FindUniqueUserExampleArgs = {
    /**
     * Select specific fields to fetch from the UserExample
    **/
    select?: XOR<UserExampleSelect, null>
    /**
     * Filter, which UserExample to fetch.
    **/
    where: UserExampleWhereUniqueInput
  }


  /**
   * UserExample findFirst
   */
  export type FindFirstUserExampleArgs = {
    /**
     * Select specific fields to fetch from the UserExample
    **/
    select?: XOR<UserExampleSelect, null>
    /**
     * Filter, which UserExample to fetch.
    **/
    where?: UserExampleWhereInput
    orderBy?: XOR<Enumerable<UserExampleOrderByInput>, UserExampleOrderByInput>
    cursor?: UserExampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserExampleDistinctFieldEnum>
  }


  /**
   * UserExample findMany
   */
  export type FindManyUserExampleArgs = {
    /**
     * Select specific fields to fetch from the UserExample
    **/
    select?: XOR<UserExampleSelect, null>
    /**
     * Filter, which UserExamples to fetch.
    **/
    where?: UserExampleWhereInput
    /**
     * Determine the order of the UserExamples to fetch.
    **/
    orderBy?: XOR<Enumerable<UserExampleOrderByInput>, UserExampleOrderByInput>
    /**
     * Sets the position for listing UserExamples.
    **/
    cursor?: UserExampleWhereUniqueInput
    /**
     * The number of UserExamples to fetch. If negative number, it will take UserExamples before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` UserExamples.
    **/
    skip?: number
    distinct?: Enumerable<UserExampleDistinctFieldEnum>
  }


  /**
   * UserExample create
   */
  export type UserExampleCreateArgs = {
    /**
     * Select specific fields to fetch from the UserExample
    **/
    select?: XOR<UserExampleSelect, null>
    /**
     * The data needed to create a UserExample.
    **/
    data: UserExampleCreateInput
  }


  /**
   * UserExample update
   */
  export type UserExampleUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserExample
    **/
    select?: XOR<UserExampleSelect, null>
    /**
     * The data needed to update a UserExample.
    **/
    data: UserExampleUpdateInput
    /**
     * Choose, which UserExample to update.
    **/
    where: UserExampleWhereUniqueInput
  }


  /**
   * UserExample updateMany
   */
  export type UserExampleUpdateManyArgs = {
    data: UserExampleUpdateManyMutationInput
    where?: UserExampleWhereInput
  }


  /**
   * UserExample upsert
   */
  export type UserExampleUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserExample
    **/
    select?: XOR<UserExampleSelect, null>
    /**
     * The filter to search for the UserExample to update in case it exists.
    **/
    where: UserExampleWhereUniqueInput
    /**
     * In case the UserExample found by the `where` argument doesn't exist, create a new UserExample with this data.
    **/
    create: UserExampleCreateInput
    /**
     * In case the UserExample was found with the provided `where` argument, update it with this data.
    **/
    update: UserExampleUpdateInput
  }


  /**
   * UserExample delete
   */
  export type UserExampleDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserExample
    **/
    select?: XOR<UserExampleSelect, null>
    /**
     * Filter which UserExample to delete.
    **/
    where: UserExampleWhereUniqueInput
  }


  /**
   * UserExample deleteMany
   */
  export type UserExampleDeleteManyArgs = {
    where?: UserExampleWhereInput
  }


  /**
   * UserExample without action
   */
  export type UserExampleArgs = {
    /**
     * Select specific fields to fetch from the UserExample
    **/
    select?: XOR<UserExampleSelect, null>
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserExampleDistinctFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name'
  };

  export type UserExampleDistinctFieldEnum = (typeof UserExampleDistinctFieldEnum)[keyof typeof UserExampleDistinctFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserExampleWhereInput = {
    AND?: XOR<UserExampleWhereInput, Enumerable<UserExampleWhereInput>>
    OR?: XOR<UserExampleWhereInput, Enumerable<UserExampleWhereInput>>
    NOT?: XOR<UserExampleWhereInput, Enumerable<UserExampleWhereInput>>
    id?: XOR<IntFilter, number>
    email?: XOR<StringFilter, string>
    name?: StringNullableFilter | string | null
  }

  export type UserExampleOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
  }

  export type UserExampleWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserExampleCreateInput = {
    email: string
    name?: XOR<string, null>
  }

  export type UserExampleUpdateInput = {
    email?: XOR<string, StringFieldUpdateOperationsInput>
    name?: string | NullableStringFieldUpdateOperationsInput | null
  }

  export type UserExampleUpdateManyMutationInput = {
    email?: XOR<string, StringFieldUpdateOperationsInput>
    name?: string | NullableStringFieldUpdateOperationsInput | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedIntFilter>
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: XOR<string, NestedStringFilter>
  }

  export type StringNullableFilter = {
    equals?: XOR<string, null>
    in?: XOR<Enumerable<string>, null>
    notIn?: XOR<Enumerable<string>, null>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: string | NestedStringNullableFilter | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: XOR<string, null>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedIntFilter>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: XOR<string, NestedStringFilter>
  }

  export type NestedStringNullableFilter = {
    equals?: XOR<string, null>
    in?: XOR<Enumerable<string>, null>
    notIn?: XOR<Enumerable<string>, null>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: string | NestedStringNullableFilter | null
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatiblity introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.UserExampleDistinctFieldEnum`
 */
export type UserExampleDistinctFieldEnum = Prisma.UserExampleDistinctFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateUserExample`
 */
export type AggregateUserExample = Prisma.AggregateUserExample

/**
 * @deprecated Renamed to `Prisma.UserExampleAvgAggregateOutputType`
 */
export type UserExampleAvgAggregateOutputType = Prisma.UserExampleAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserExampleSumAggregateOutputType`
 */
export type UserExampleSumAggregateOutputType = Prisma.UserExampleSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserExampleMinAggregateOutputType`
 */
export type UserExampleMinAggregateOutputType = Prisma.UserExampleMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserExampleMaxAggregateOutputType`
 */
export type UserExampleMaxAggregateOutputType = Prisma.UserExampleMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUserExampleArgs`
 */
export type AggregateUserExampleArgs = Prisma.AggregateUserExampleArgs

/**
 * @deprecated Renamed to `Prisma.UserExampleAvgAggregateInputType`
 */
export type UserExampleAvgAggregateInputType = Prisma.UserExampleAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserExampleSumAggregateInputType`
 */
export type UserExampleSumAggregateInputType = Prisma.UserExampleSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserExampleMinAggregateInputType`
 */
export type UserExampleMinAggregateInputType = Prisma.UserExampleMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserExampleMaxAggregateInputType`
 */
export type UserExampleMaxAggregateInputType = Prisma.UserExampleMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserExampleSelect`
 */
export type UserExampleSelect = Prisma.UserExampleSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueUserExampleArgs`
 */
export type FindUniqueUserExampleArgs = Prisma.FindUniqueUserExampleArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstUserExampleArgs`
 */
export type FindFirstUserExampleArgs = Prisma.FindFirstUserExampleArgs

/**
 * @deprecated Renamed to `Prisma.FindManyUserExampleArgs`
 */
export type FindManyUserExampleArgs = Prisma.FindManyUserExampleArgs

/**
 * @deprecated Renamed to `Prisma.UserExampleCreateArgs`
 */
export type UserExampleCreateArgs = Prisma.UserExampleCreateArgs

/**
 * @deprecated Renamed to `Prisma.UserExampleUpdateArgs`
 */
export type UserExampleUpdateArgs = Prisma.UserExampleUpdateArgs

/**
 * @deprecated Renamed to `Prisma.UserExampleUpdateManyArgs`
 */
export type UserExampleUpdateManyArgs = Prisma.UserExampleUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.UserExampleUpsertArgs`
 */
export type UserExampleUpsertArgs = Prisma.UserExampleUpsertArgs

/**
 * @deprecated Renamed to `Prisma.UserExampleDeleteArgs`
 */
export type UserExampleDeleteArgs = Prisma.UserExampleDeleteArgs

/**
 * @deprecated Renamed to `Prisma.UserExampleDeleteManyArgs`
 */
export type UserExampleDeleteManyArgs = Prisma.UserExampleDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.UserExampleWhereInput`
 */
export type UserExampleWhereInput = Prisma.UserExampleWhereInput

/**
 * @deprecated Renamed to `Prisma.UserExampleOrderByInput`
 */
export type UserExampleOrderByInput = Prisma.UserExampleOrderByInput

/**
 * @deprecated Renamed to `Prisma.UserExampleWhereUniqueInput`
 */
export type UserExampleWhereUniqueInput = Prisma.UserExampleWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.UserExampleCreateInput`
 */
export type UserExampleCreateInput = Prisma.UserExampleCreateInput

/**
 * @deprecated Renamed to `Prisma.UserExampleUpdateInput`
 */
export type UserExampleUpdateInput = Prisma.UserExampleUpdateInput

/**
 * @deprecated Renamed to `Prisma.UserExampleUpdateManyMutationInput`
 */
export type UserExampleUpdateManyMutationInput = Prisma.UserExampleUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter