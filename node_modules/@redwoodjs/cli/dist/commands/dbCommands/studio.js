"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.description = exports.command = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var options = _interopRequireWildcard(require("./options"));

var _lib = require("../../lib");

var _colors = _interopRequireDefault(require("../../lib/colors"));

const command = 'studio';
exports.command = command;
const description = 'Start Prisma Studio';
exports.description = description;

const builder = yargs => {
  yargs.option('schema', options.schema()).epilogue(options.epilogue());
};

exports.builder = builder;

const handler = async ({
  schema
}) => {
  // No schema, no studio.
  if (!_fs.default.existsSync(schema)) {
    console.log(`${_colors.default.warning('[warning]')} cannot start Prisma Studio; schema missing (${_colors.default.info( // So we're not hard coding schema.prisma's relative location
    _path.default.relative((0, _lib.getPaths)().base, schema))}).`);
    return;
  }

  await (0, _lib.runCommandTask)([{
    title: 'Starting Prisma Studio...',
    cmd: 'yarn prisma',
    args: ['studio', schema && `--schema="${schema}"`]
  }], {
    verbose: true
  });
};

exports.handler = handler;